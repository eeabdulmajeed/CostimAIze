import time
import openai
import os
import csv
import hashlib
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor

class CostimAIzeOrchestrator:
    def __init__(self):
        self.historical_data = []
        self.context = {}
        self.historical_contexts = []
        self.cost_estimator = CautiousCostEstimator()
        self.previous_hash = None
        self.cached_result = None
        openai.api_key = "YOUR_OPENAI_API_KEY"  # استبدل بمفتاحك الفعلي

    def extract_text(self, file):
        try:
            content = file.read()
            file_hash = hashlib.md5(content).hexdigest()
            self.context["file_hash"] = file_hash
            if file.type == "text/plain":
                return content.decode("utf-8")
            else:
                return "Content extracted successfully from non-text file..."
        except Exception as e:
            return f"Error extracting text: {str(e)}"

    def validate_sow(self, text):
        prompt = """
        As an experienced pricing engineer, review this scope of work text and determine if it has enough detail for a cost estimate.
        Respond with 'Yes' if analyzable, 'No' with a reason if not.
        Text: "{text[:1000]}"
        """
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt.format(text ​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​